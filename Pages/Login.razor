@page "/Login"
@using Assignment1.Login
@namespace LoginComponent
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
<h3>Login</h3>


<AuthorizeView>
    <NotAuthorized>
        <div class="form-group">
            <label>User name:</label>
            <input type="text" placeholder="user name" @bind-value="username"/>
        </div>
        <div class="form-group">
            <label>Password</label>
            <input type="password" placeholder="password" @bind-value="password"/>
        </div>
        <div style="color:red">@errorMessage</div>

        <a href="" @onclick="PerformLogin">
            <button class="btn btn-outline-dark" type="submit">Log in</button>
        </a>
    </NotAuthorized>

    <Authorized>
        <p><br/>@context.User.FindFirst(claim => claim.Type.Equals("Role"))<br/></p>
        <a href="" @onclick="PerformLogout">
            <button class="btn btn-outline-dark" type="submit">Log out</button>
        </a>
    </Authorized>
</AuthorizeView>


@code {
    private string username;
    private string password;
    private string errorMessage;

    public async Task PerformLogin()
    {
        errorMessage = "";
        try
        {
            ((CustomAuthentication) AuthenticationStateProvider).validateLogin(username, password);
            username = "";
            password = "";
        }
        catch (Exception e)
        {
            errorMessage = "User is not registered";
        }
    }

    public async Task PerformLogout()
    {
        errorMessage = "";
        username = "";
        password = "";
        try
        {
            ((CustomAuthentication) AuthenticationStateProvider).LogOut();
            NavigationManager.NavigateTo("/Login");
        }
        catch (Exception e)
        {
        }
    }

}